"""Acknowledge Zenoss events by their EventID"""

from Jabber.Plugins import Plugin
from Jabber.ZenAdapter import ZenAdapter
from Jabber.Options import Options
from optparse import OptionError
import transaction

class Ack(Plugin):

  def call(self, args, log, **kw):
    opts = self.options()

    # parse the options
    try:
        (options, arguments) = opts.parse_args(args)
        log.info("Done parsing arguments.  Options are '%s', arguments expanded to %s" % (options, arguments))
    except OptionError, message:
        return str(message)
    if options.eventIds is None and not options.all:
        return 'NO.  -e or --eventids is required if -a is not specified.'

  def options(self):
    parser = Options(description = 'Acknowledge events by eventid', prog = 'ack')
    parser.add_option("-e", "--eventids", dest="eventIds", help="Complete or partial eventids to ack.  Ids can be sepratated by commas.  Partial ids can match either the beginning or end of the eventid.")
    parser.add_option("-a", "--all", dest="all", action="store_true", default=False, help="Acknowledge all events.  If -e is also specified, it will still acknowledge every event.")
    parser.add_option("-d", "--device", dest="device", help="Only ack events that exist on this device.  NOT IMPLEMENTED.")
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help="Send list of all acknowledged events.  Can be noisy.  USE WITH CAUTION.")
    parser.add_option("-t", "--test", dest="test", action="store_true", default=False, help="Do not acknowledge events, but show what would be done.  Works with -v.")
    return parser

  def help(self):
    return self.options().usage
